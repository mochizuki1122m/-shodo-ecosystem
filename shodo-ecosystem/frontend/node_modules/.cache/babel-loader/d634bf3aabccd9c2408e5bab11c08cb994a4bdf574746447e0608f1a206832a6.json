{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Axiosインスタンスの作成\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// リクエストインターセプター（認証トークンの追加）\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// レスポンスインターセプター（エラーハンドリング）\napiClient.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // 認証エラーの場合はログイン画面へリダイレクト\n    localStorage.removeItem('authToken');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// NLP API\nexport const analyzeText = async text => {\n  const response = await apiClient.post('/api/v1/nlp/analyze', {\n    text\n  });\n  return response.data;\n};\nexport const refineAnalysis = async (analysisId, refinement) => {\n  const response = await apiClient.post(`/api/v1/nlp/refine/${analysisId}`, {\n    refinement\n  });\n  return response.data;\n};\n\n// Preview API\nexport const generatePreview = async (changes, context) => {\n  const response = await apiClient.post('/api/v1/preview/generate', {\n    changes,\n    context\n  });\n  return response.data;\n};\nexport const refinePreview = async (previewId, refinement) => {\n  const response = await apiClient.post(`/api/v1/preview/refine/${previewId}`, {\n    refinement\n  });\n  return response.data;\n};\nexport const applyPreview = async previewId => {\n  const response = await apiClient.post(`/api/v1/preview/apply/${previewId}`);\n  return response.data;\n};\n\n// Dashboard API\nexport const getDetectedServices = async () => {\n  const response = await apiClient.get('/api/v1/dashboard/services');\n  return response.data;\n};\nexport const getServiceStatus = async serviceId => {\n  const response = await apiClient.get(`/api/v1/dashboard/services/${serviceId}/status`);\n  return response.data;\n};\n\n// Auth API\nexport const login = async (email, password) => {\n  const response = await apiClient.post('/api/v1/auth/login', {\n    email,\n    password\n  });\n  return response.data;\n};\nexport const logout = async () => {\n  const response = await apiClient.post('/api/v1/auth/logout');\n  return response.data;\n};\nexport const getCurrentUser = async () => {\n  const response = await apiClient.get('/api/v1/auth/me');\n  return response.data;\n};\n\n// MCP API\nexport const getAvailableTools = async () => {\n  const response = await apiClient.get('/api/v1/mcp/tools');\n  return response.data;\n};\nexport const invokeTool = async (toolId, params) => {\n  const response = await apiClient.post(`/api/v1/mcp/tools/${toolId}/invoke`, params);\n  return response.data;\n};\nexport default apiClient;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","analyzeText","text","post","data","refineAnalysis","analysisId","refinement","generatePreview","changes","context","refinePreview","previewId","applyPreview","getDetectedServices","get","getServiceStatus","serviceId","login","email","password","logout","getCurrentUser","getAvailableTools","invokeTool","toolId","params"],"sources":["/workspace/shodo-ecosystem/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Axiosインスタンスの作成\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// リクエストインターセプター（認証トークンの追加）\napiClient.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// レスポンスインターセプター（エラーハンドリング）\napiClient.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      // 認証エラーの場合はログイン画面へリダイレクト\n      localStorage.removeItem('authToken');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// NLP API\nexport const analyzeText = async (text: string) => {\n  const response = await apiClient.post('/api/v1/nlp/analyze', { text });\n  return response.data;\n};\n\nexport const refineAnalysis = async (analysisId: string, refinement: string) => {\n  const response = await apiClient.post(`/api/v1/nlp/refine/${analysisId}`, { refinement });\n  return response.data;\n};\n\n// Preview API\nexport const generatePreview = async (changes: any[], context: any) => {\n  const response = await apiClient.post('/api/v1/preview/generate', { changes, context });\n  return response.data;\n};\n\nexport const refinePreview = async (previewId: string, refinement: string) => {\n  const response = await apiClient.post(`/api/v1/preview/refine/${previewId}`, { refinement });\n  return response.data;\n};\n\nexport const applyPreview = async (previewId: string) => {\n  const response = await apiClient.post(`/api/v1/preview/apply/${previewId}`);\n  return response.data;\n};\n\n// Dashboard API\nexport const getDetectedServices = async () => {\n  const response = await apiClient.get('/api/v1/dashboard/services');\n  return response.data;\n};\n\nexport const getServiceStatus = async (serviceId: string) => {\n  const response = await apiClient.get(`/api/v1/dashboard/services/${serviceId}/status`);\n  return response.data;\n};\n\n// Auth API\nexport const login = async (email: string, password: string) => {\n  const response = await apiClient.post('/api/v1/auth/login', { email, password });\n  return response.data;\n};\n\nexport const logout = async () => {\n  const response = await apiClient.post('/api/v1/auth/logout');\n  return response.data;\n};\n\nexport const getCurrentUser = async () => {\n  const response = await apiClient.get('/api/v1/auth/me');\n  return response.data;\n};\n\n// MCP API\nexport const getAvailableTools = async () => {\n  const response = await apiClient.get('/api/v1/mcp/tools');\n  return response.data;\n};\n\nexport const invokeTool = async (toolId: string, params: any) => {\n  const response = await apiClient.post(`/api/v1/mcp/tools/${toolId}/invoke`, params);\n  return response.data;\n};\n\nexport default apiClient;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}