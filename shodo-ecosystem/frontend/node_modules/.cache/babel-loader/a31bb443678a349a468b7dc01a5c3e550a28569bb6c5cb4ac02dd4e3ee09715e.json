{"ast":null,"code":"import axios from'axios';const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:8000';// Axiosインスタンスの作成\nconst apiClient=axios.create({baseURL:API_BASE_URL,headers:{'Content-Type':'application/json'}});// リクエストインターセプター（認証トークンの追加）\napiClient.interceptors.request.use(config=>{const token=localStorage.getItem('authToken');if(token){config.headers.Authorization=\"Bearer \".concat(token);}return config;},error=>{return Promise.reject(error);});// レスポンスインターセプター（エラーハンドリング）\napiClient.interceptors.response.use(response=>response,error=>{var _error$response;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){// 認証エラーの場合はログイン画面へリダイレクト\nlocalStorage.removeItem('authToken');window.location.href='/login';}return Promise.reject(error);});// NLP API\nexport const analyzeText=async text=>{const response=await apiClient.post('/api/v1/nlp/analyze',{text});return response.data;};export const refineAnalysis=async(analysisId,refinement)=>{const response=await apiClient.post(\"/api/v1/nlp/refine/\".concat(analysisId),{refinement});return response.data;};// Preview API\nexport const generatePreview=async(changes,context)=>{const response=await apiClient.post('/api/v1/preview/generate',{changes,context});return response.data;};export const refinePreview=async(previewId,refinement)=>{const response=await apiClient.post(\"/api/v1/preview/refine/\".concat(previewId),{refinement});return response.data;};export const applyPreview=async previewId=>{const response=await apiClient.post(\"/api/v1/preview/apply/\".concat(previewId));return response.data;};// Dashboard API\nexport const getDetectedServices=async()=>{const response=await apiClient.get('/api/v1/dashboard/services');return response.data;};export const getServiceStatus=async serviceId=>{const response=await apiClient.get(\"/api/v1/dashboard/services/\".concat(serviceId,\"/status\"));return response.data;};// Auth API\nexport const login=async(email,password)=>{const response=await apiClient.post('/api/v1/auth/login',{email,password});return response.data;};export const logout=async()=>{const response=await apiClient.post('/api/v1/auth/logout');return response.data;};export const getCurrentUser=async()=>{const response=await apiClient.get('/api/v1/auth/me');return response.data;};// MCP API\nexport const getAvailableTools=async()=>{const response=await apiClient.get('/api/v1/mcp/tools');return response.data;};export const invokeTool=async(toolId,params)=>{const response=await apiClient.post(\"/api/v1/mcp/tools/\".concat(toolId,\"/invoke\"),params);return response.data;};export default apiClient;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","concat","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","analyzeText","text","post","data","refineAnalysis","analysisId","refinement","generatePreview","changes","context","refinePreview","previewId","applyPreview","getDetectedServices","get","getServiceStatus","serviceId","login","email","password","logout","getCurrentUser","getAvailableTools","invokeTool","toolId","params"],"sources":["/workspace/shodo-ecosystem/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Axiosインスタンスの作成\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// リクエストインターセプター（認証トークンの追加）\napiClient.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// レスポンスインターセプター（エラーハンドリング）\napiClient.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      // 認証エラーの場合はログイン画面へリダイレクト\n      localStorage.removeItem('authToken');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// NLP API\nexport const analyzeText = async (text: string) => {\n  const response = await apiClient.post('/api/v1/nlp/analyze', { text });\n  return response.data;\n};\n\nexport const refineAnalysis = async (analysisId: string, refinement: string) => {\n  const response = await apiClient.post(`/api/v1/nlp/refine/${analysisId}`, { refinement });\n  return response.data;\n};\n\n// Preview API\nexport const generatePreview = async (changes: any[], context: any) => {\n  const response = await apiClient.post('/api/v1/preview/generate', { changes, context });\n  return response.data;\n};\n\nexport const refinePreview = async (previewId: string, refinement: string) => {\n  const response = await apiClient.post(`/api/v1/preview/refine/${previewId}`, { refinement });\n  return response.data;\n};\n\nexport const applyPreview = async (previewId: string) => {\n  const response = await apiClient.post(`/api/v1/preview/apply/${previewId}`);\n  return response.data;\n};\n\n// Dashboard API\nexport const getDetectedServices = async () => {\n  const response = await apiClient.get('/api/v1/dashboard/services');\n  return response.data;\n};\n\nexport const getServiceStatus = async (serviceId: string) => {\n  const response = await apiClient.get(`/api/v1/dashboard/services/${serviceId}/status`);\n  return response.data;\n};\n\n// Auth API\nexport const login = async (email: string, password: string) => {\n  const response = await apiClient.post('/api/v1/auth/login', { email, password });\n  return response.data;\n};\n\nexport const logout = async () => {\n  const response = await apiClient.post('/api/v1/auth/logout');\n  return response.data;\n};\n\nexport const getCurrentUser = async () => {\n  const response = await apiClient.get('/api/v1/auth/me');\n  return response.data;\n};\n\n// MCP API\nexport const getAvailableTools = async () => {\n  const response = await apiClient.get('/api/v1/mcp/tools');\n  return response.data;\n};\n\nexport const invokeTool = async (toolId: string, params: any) => {\n  const response = await apiClient.post(`/api/v1/mcp/tools/${toolId}/invoke`, params);\n  return response.data;\n};\n\nexport default apiClient;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}