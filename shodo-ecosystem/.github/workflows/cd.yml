name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types: [completed]
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ===== Pre-deployment Validation =====
  validate:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    outputs:
      deploy_staging: ${{ steps.check.outputs.staging }}
      deploy_production: ${{ steps.check.outputs.production }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Check deployment conditions
        id: check
        run: |
          # Check SLO compliance
          echo "Checking SLO metrics..."
          
          # For staging: auto-deploy from main
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "staging=true" >> $GITHUB_OUTPUT
          fi
          
          # For production: require manual approval
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]] && [[ "${{ inputs.environment }}" == "production" ]]; then
            echo "production=true" >> $GITHUB_OUTPUT
          fi

  # ===== Deploy to Staging =====
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.deploy_staging == 'true'
    environment:
      name: staging
      url: https://staging.shodo.example.com
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
      
      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.13.0'
      
      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > ~/.kube/config
      
      - name: Deploy with Helm
        run: |
          helm upgrade --install shodo-ecosystem ./k8s/helm \
            --namespace shodo-staging \
            --create-namespace \
            --values ./k8s/helm/values.staging.yaml \
            --set image.tag=${{ github.sha }} \
            --set image.registry=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            --wait \
            --timeout 10m
      
      - name: Verify deployment
        run: |
          kubectl -n shodo-staging rollout status deployment/shodo-backend
          kubectl -n shodo-staging rollout status deployment/shodo-frontend
          kubectl -n shodo-staging rollout status deployment/shodo-ai-server
      
      - name: Run smoke tests
        run: |
          # Wait for services to be ready
          sleep 30
          
          # Health checks
          curl -f https://staging.shodo.example.com/health || exit 1
          curl -f https://staging.shodo.example.com/api/v1/health || exit 1
      
      - name: Run acceptance tests
        run: |
          cd e2e
          npm ci
          ENVIRONMENT=staging npx playwright test --grep @smoke

  # ===== Canary Deployment to Production =====
  deploy-production-canary:
    name: Canary Deployment
    runs-on: ubuntu-latest
    needs: [validate, deploy-staging]
    if: needs.validate.outputs.deploy_production == 'true'
    environment:
      name: production-canary
      url: https://canary.shodo.example.com
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
      
      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.PRODUCTION_KUBECONFIG }}" | base64 -d > ~/.kube/config
      
      - name: Deploy canary (10% traffic)
        run: |
          kubectl apply -f - <<EOF
          apiVersion: v1
          kind: Service
          metadata:
            name: shodo-backend-canary
            namespace: shodo
          spec:
            selector:
              app: shodo-backend
              version: canary
            ports:
              - port: 8000
                targetPort: 8000
          ---
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: shodo-backend-canary
            namespace: shodo
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: shodo-backend
                version: canary
            template:
              metadata:
                labels:
                  app: shodo-backend
                  version: canary
              spec:
                containers:
                - name: backend
                  image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
                  ports:
                  - containerPort: 8000
                  env:
                  - name: ENVIRONMENT
                    value: production
                  livenessProbe:
                    httpGet:
                      path: /health/live
                      port: 8000
                    initialDelaySeconds: 30
                    periodSeconds: 10
                  readinessProbe:
                    httpGet:
                      path: /health/ready
                      port: 8000
                    initialDelaySeconds: 10
                    periodSeconds: 5
          EOF
      
      - name: Configure traffic split (10% canary)
        run: |
          kubectl apply -f - <<EOF
          apiVersion: networking.istio.io/v1beta1
          kind: VirtualService
          metadata:
            name: shodo-backend
            namespace: shodo
          spec:
            hosts:
            - shodo-backend
            http:
            - match:
              - headers:
                  canary:
                    exact: "true"
              route:
              - destination:
                  host: shodo-backend-canary
                weight: 100
            - route:
              - destination:
                  host: shodo-backend
                weight: 90
              - destination:
                  host: shodo-backend-canary
                weight: 10
          EOF
      
      - name: Monitor canary metrics
        run: |
          # Monitor error rate and latency for 10 minutes
          sleep 600
          
          # Check canary metrics
          ERROR_RATE=$(kubectl exec -n shodo deployment/prometheus -- \
            promtool query instant 'rate(http_requests_total{job="shodo-backend-canary",status=~"5.."}[5m])')
          
          if (( $(echo "$ERROR_RATE > 0.01" | bc -l) )); then
            echo "Canary error rate too high: $ERROR_RATE"
            exit 1
          fi

  # ===== Full Production Deployment =====
  deploy-production:
    name: Production Deployment
    runs-on: ubuntu-latest
    needs: deploy-production-canary
    environment:
      name: production
      url: https://shodo.example.com
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
      
      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.PRODUCTION_KUBECONFIG }}" | base64 -d > ~/.kube/config
      
      - name: Blue-Green Deployment
        run: |
          # Deploy to green environment
          helm upgrade --install shodo-ecosystem-green ./k8s/helm \
            --namespace shodo \
            --values ./k8s/helm/values.production.yaml \
            --set image.tag=${{ github.sha }} \
            --set image.registry=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            --set deployment.slot=green \
            --wait \
            --timeout 10m
          
          # Run health checks on green
          kubectl -n shodo exec deployment/shodo-backend-green -- curl -f http://localhost:8000/health
          
          # Switch traffic to green
          kubectl -n shodo patch service shodo-backend -p '{"spec":{"selector":{"slot":"green"}}}'
          kubectl -n shodo patch service shodo-frontend -p '{"spec":{"selector":{"slot":"green"}}}'
          
          # Monitor for 5 minutes
          sleep 300
          
          # If successful, scale down blue
          kubectl -n shodo scale deployment shodo-backend-blue --replicas=0
          kubectl -n shodo scale deployment shodo-frontend-blue --replicas=0
      
      - name: Verify production deployment
        run: |
          # Health checks
          curl -f https://shodo.example.com/health || exit 1
          curl -f https://shodo.example.com/api/v1/health || exit 1
          
          # SLO checks
          ./scripts/check-slo.sh production
      
      - name: Create deployment record
        run: |
          # Record deployment in audit log
          curl -X POST https://shodo.example.com/api/admin/audit/deployment \
            -H "Authorization: Bearer ${{ secrets.AUDIT_TOKEN }}" \
            -d '{
              "version": "${{ github.sha }}",
              "environment": "production",
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
              "deployed_by": "${{ github.actor }}",
              "status": "success"
            }'

  # ===== Rollback (if needed) =====
  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    needs: deploy-production
    if: failure()
    environment:
      name: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.PRODUCTION_KUBECONFIG }}" | base64 -d > ~/.kube/config
      
      - name: Rollback to blue
        run: |
          # Switch traffic back to blue
          kubectl -n shodo patch service shodo-backend -p '{"spec":{"selector":{"slot":"blue"}}}'
          kubectl -n shodo patch service shodo-frontend -p '{"spec":{"selector":{"slot":"blue"}}}'
          
          # Scale up blue
          kubectl -n shodo scale deployment shodo-backend-blue --replicas=4
          kubectl -n shodo scale deployment shodo-frontend-blue --replicas=4
          
          # Scale down green
          kubectl -n shodo scale deployment shodo-backend-green --replicas=0
          kubectl -n shodo scale deployment shodo-frontend-green --replicas=0
      
      - name: Notify rollback
        run: |
          # Send notification about rollback
          echo "Rollback completed"

  # ===== Post-deployment Tasks =====
  post-deploy:
    name: Post-deployment Tasks
    runs-on: ubuntu-latest
    needs: deploy-production
    if: success()
    steps:
      - name: Clear CDN cache
        run: |
          # Clear CloudFlare cache
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CF_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CF_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"purge_everything":true}'
      
      - name: Update documentation
        run: |
          # Update API documentation
          echo "Documentation updated"
      
      - name: Notify deployment success
        run: |
          # Send notification to Slack/Teams
          echo "Deployment successful"