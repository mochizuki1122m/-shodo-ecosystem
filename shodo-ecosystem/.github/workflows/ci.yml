name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ===== Code Quality =====
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.npm
          key: ${{ runner.os }}-deps-${{ hashFiles('**/requirements.txt', '**/package-lock.json') }}
      
      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install black pylint mypy isort safety bandit
      
      - name: Python Linting
        run: |
          cd backend
          black --check src/
          isort --check-only src/
          pylint src/ || true
          mypy src/ || true
      
      - name: Frontend Linting
        run: |
          cd frontend
          npm ci
          npm run lint

  # ===== Security Scanning =====
  security:
    name: Security Scan (SAST)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Python Security Check (Bandit)
        run: |
          pip install bandit
          bandit -r backend/src/ -f json -o bandit-report.json || true
      
      - name: Python Dependency Check (Safety)
        run: |
          pip install safety
          cd backend
          safety check --json > safety-report.json || true
      
      - name: npm audit
        run: |
          cd frontend
          npm audit --json > npm-audit.json || true
      
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            npm-audit.json

  # ===== Unit Tests =====
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_shodo
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov httpx-mock
      
      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql://postgres:test@localhost/test_shodo
          REDIS_URL: redis://localhost:6379
          ENVIRONMENT: test
        run: |
          cd backend
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=term
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Run tests with coverage
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend

  # ===== Build & Sign Container Images =====
  build:
    name: Build & Sign Images
    runs-on: ubuntu-latest
    needs: [lint, security, test-backend, test-frontend]
    permissions:
      contents: read
      packages: write
      id-token: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install cosign
        uses: sigstore/cosign-installer@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
      
      # Build Backend
      - name: Build Backend Image
        id: build-backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      # Build Frontend
      - name: Build Frontend Image
        id: build-frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      # Build AI Server
      - name: Build AI Server Image
        id: build-ai
        uses: docker/build-push-action@v5
        with:
          context: ./ai-server
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ai-server:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      # Sign images with Cosign
      - name: Sign Backend Image
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
      
      - name: Sign Frontend Image
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
      
      - name: Sign AI Server Image
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ai-server:${{ github.sha }}

  # ===== Generate SBOM =====
  sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate SBOM for Backend
        uses: anchore/sbom-action@v0
        with:
          path: ./backend
          format: spdx-json
          output-file: sbom-backend.json
      
      - name: Generate SBOM for Frontend
        uses: anchore/sbom-action@v0
        with:
          path: ./frontend
          format: spdx-json
          output-file: sbom-frontend.json
      
      - name: Upload SBOMs
        uses: actions/upload-artifact@v3
        with:
          name: sboms
          path: |
            sbom-backend.json
            sbom-frontend.json

  # ===== DAST (Dynamic Application Security Testing) =====
  dast:
    name: DAST Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to test environment
        run: |
          # Deploy to ephemeral test environment
          echo "Deploying to test environment..."
      
      - name: Run OWASP ZAP scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: 'https://test.shodo.example.com'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
      
      - name: Upload ZAP results
        uses: actions/upload-artifact@v3
        with:
          name: zap-report
          path: report_html.html

  # ===== Integration Tests =====
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      
      - name: Start services with Docker Compose
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30  # Wait for services to be ready
      
      - name: Run integration tests
        run: |
          cd backend
          pip install pytest pytest-asyncio httpx
          pytest tests/integration/ -v
      
      - name: Stop services
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down

  # ===== E2E Tests =====
  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Playwright
        uses: microsoft/playwright-github-action@v1
      
      - name: Start application
        run: |
          docker-compose up -d
          npx wait-on http://localhost:3000 http://localhost:8000/health -t 60000
      
      - name: Run E2E tests
        run: |
          cd e2e
          npm ci
          npx playwright test
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: e2e/playwright-report/

  # ===== Deploy Gate Check =====
  deploy-gate:
    name: Deployment Gate Check
    runs-on: ubuntu-latest
    needs: [build, sbom, integration-test, e2e-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      deploy_approved: ${{ steps.gate.outputs.approved }}
    steps:
      - name: Check deployment criteria
        id: gate
        run: |
          echo "Checking deployment criteria..."
          
          # Check if all tests passed
          # Check if security scans passed
          # Check if coverage meets threshold
          # Check if no HIGH/CRITICAL vulnerabilities
          
          echo "approved=true" >> $GITHUB_OUTPUT
      
      - name: Create deployment record
        if: steps.gate.outputs.approved == 'true'
        run: |
          echo "Recording deployment approval..."
          # Create audit log entry